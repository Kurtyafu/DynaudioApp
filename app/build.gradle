plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
//    id 'org.greenrobot.greendao'
}
/**
 * 项目打包命令:.\gradlew app:clean app:assembleRelease -P host=pre -P version=1.0 -P buildcode=20230512
 * host：项目请求路径 dev：测试; pre：预生产(default); prod:生产;
 * version:版本号 默认1.0
 * buildcode:构件号 不配置默认为打包的日期
 * hostPath:默认不需要更改 如果该值不为空 会使host无效
 */

android {
    signingConfigs {
        release {
            storeFile file('xiaohu.jks')
            keyAlias 'key0'
            storePassword '123456'
            keyPassword '123456'


        }
    }
    namespace 'com.byd.dynaudio_app'
    compileSdk 33

    defaultConfig {
        applicationId "com.byd.dynaudio_app"
        minSdk 24
        targetSdk 33
        versionCode 1

        // 应用版本号 打包可定制 未指定则为1.0
        def vName = project.hasProperty('version') ? project.getProperty('version') : '1.0'
        if ('unspecified' == vName) {
            vName = '1.0'
        }
//        print "version name : " + vName
        versionName vName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
//        javaCompileOptions { annotationProcessorOptions { includeCompileClasspath = true }}

        // 指定兼容的cpu架构
        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
        }

        // 打出来包的请求地址 dev:内部测试地址 pre:预生产 prod:生产 不配置默认为预生产
        def host = project.hasProperty('host') ? project.getProperty('host') : 'pre'
        // host = 'prod'
        buildConfigField("String", "HOST", "\"" + host + "\"")
        // 有路径的情况下 会覆盖掉type
        def hostPath = project.hasProperty('hostPath') ? project.getProperty('hostPath') : ''
        buildConfigField("String", "HOST_PATH", "\"" + hostPath + "\"")

        def buildCode = ''// 构件号 如果打包未指定 则为打包日期
        if (project.hasProperty('buildcode')) {
            buildCode = project.getProperty('buildcode')
        } else {
            buildCode = new Date().format("yyyyMMdd", TimeZone.getTimeZone("GMT+08"))
        }
        buildConfigField("String", "BUILD_CODE", "\"" + buildCode + "\"")

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    dataBinding {
        enabled = true;
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def date = new Date().format("yyyy_MM_dd_", TimeZone.getTimeZone("GMT+08"))
            if (variant.buildType.name == "debug") {
                output.outputFileName = "${android.defaultConfig.applicationId}${date}${android.defaultConfig.versionName}_debug_${android.defaultConfig.versionCode}.apk"
            } else if (variant.buildType.name == "release" || variant.buildType.name == "IDESign") {
                output.outputFileName = "${date}_dyaudioRelease_${android.defaultConfig.versionName}.apk"
            }
        }
    }
}

dependencies {
//    implementation 'me.wcy:lrcview:2.2.1'

    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation files('src\\main\\libs\\bydauto_openapi_丹拿_20230324.jar')
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    implementation 'androidx.recyclerview:recyclerview:1.1.0'

    // rxjava + retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.8.1' // 必要依赖，retrofit
    implementation 'com.squareup.retrofit2:converter-gson:2.8.1' // 必要依赖，解析json字符
    implementation 'com.squareup.okhttp3:logging-interceptor:3.5.0'// 日志拦截器

    implementation "io.reactivex.rxjava2:rxjava:2.2.6" // 必要rxjava依赖
    implementation "io.reactivex.rxjava2:rxandroid:2.1.0" // 必要rxandrroid依赖，切线程时需要用到
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.5.0' // 必要依赖，和rxjava结合必须用到

    // glide
    implementation 'com.github.bumptech.glide:glide:4.9.0'
    implementation 'jp.co.cyberagent.android.gpuimage:gpuimage-library:1.3.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.9.0'

    //androidX 版本 xbanner
    implementation 'com.github.xiaohaibin:XBanner:androidx_v1.2.6'
    implementation 'com.github.zhpanvip:bannerviewpager:3.5.4'
    //    implementation "com.youth.banner:banner:2.2.2"

    implementation 'tv.danmaku.ijk.media:ijkplayer-java:0.8.8'
    implementation 'tv.danmaku.ijk.media:ijkplayer-armv7a:0.8.8'

    // tab 栏
    implementation 'io.github.h07000223:flycoTabLayout:3.0.0'

    // 封装好的一个player
    implementation 'cn.jzvd:jiaozivideoplayer:7.7.0'
    // 音视频请求框架
//    implementation fileTree(dir: 'libs', include: ['*.jar'])
//    api 'com.lzx:StarrySkyJava:2.6.7'

    // livedatabus
    implementation 'io.github.jeremyliao:live-event-bus-x:1.8.0'

    implementation "com.github.bumptech.glide:glide:4.11.0" // glide
    implementation 'jp.wasabeef:glide-transformations:3.0.1'
    implementation 'com.github.bifan-wei:LrcView:V1.3'

    implementation 'com.github.li-xiaojun:XPopup:2.9.14'

    // 生成二维码
    implementation 'com.github.jenly1314:zxing-lite:2.3.1'
    // lottie
    implementation 'com.airbnb.android:lottie:2.7.0'

//    implementation 'pub.devrel:easypermissions:3.1.0'
//    implementation 'com.github.CarGuo.GSYVideoPlayer:GSYVideoPlayer:v8.3.5-release-jitpack'
//    implementation 'com.github.CarGuo.GSYVideoPlayer:GSYVideoPlayer-exo2:v8.3.5-release-jitpack'
//
//    configurations {
//        all*.exclude group: 'tv.danmaku.ijk.media'
//    }


//    implementation 'com.github.tohodog:QSVideoPlayer:2.2.9'


//    implementation 'org.projectlombok:lombok:1.18.10'
//    implementation 'me.wcy:lrcview:2.2.1'

    //微信
    api 'com.tencent.mm.opensdk:wechat-sdk-android:+'

    implementation 'com.google.android.exoplayer:exoplayer-core:2.18.5'
    implementation 'com.google.android.exoplayer:exoplayer-ui:2.18.5'

//    implementation 'org.greenrobot:greendao:3.3.0'

    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"

    // 下拉刷新，上拉加载
    implementation 'com.scwang.smartrefresh:SmartRefreshLayout:1.1.3'
    // 没有使用特殊Header,可以不加这一依赖
    implementation 'com.scwang.smartrefresh:SmartRefreshHeader:1.1.3'
    implementation 'com.lzy.widget:view-core:0.2.2'

    implementation 'com.github.mmin18:realtimeblurview:1.2.1'

    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:3.0.10'

//    implementation 'com.android.support:recyclerview-v7:28.0.0'
//
//    configurations.all {
//        resolutionStrategy {
//            force 'com.android.support:appcompat-v7:28.0.0'
//            // 将要使用的 support 库的版本号
//            // 您可以根据您的项目需要更改版本号
//        }
//    }

    // 文件下载
    implementation 'com.liulishuo.filedownloader:library:1.7.7'
    // 音视频缓存
    implementation 'com.danikula:videocache:2.7.1'
    implementation 'com.shizhefei:ViewPagerIndicator:1.1.9.androidx'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'

    // 倍速弹窗
    implementation 'com.github.mrgaogang:luckly_popup_window:v1.4.1'

    implementation 'com.github.zhangliangming:HPLyrics:v1.66'

    implementation 'com.caverock:androidsvg:1.4'
}
